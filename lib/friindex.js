// Generated by CoffeeScript 1.7.1
(function() {
  var FrIIndex, blacklist, empty, natural, normalization_pattern, spaces;

  natural = require('natural');

  normalization_pattern = new RegExp('[^a-zA-Z ]', 'g');

  spaces = new RegExp(' +', 'g');

  empty = [];

  blacklist = {
    "the": true,
    "be": true,
    "to": true,
    "of": true,
    "and": true,
    "in": true,
    "that": true,
    "have": true,
    "it": true,
    "not": true,
    "on": true,
    "with": true,
    "he": true,
    "as": true,
    "you": true,
    "do": true,
    "at": true,
    "this": true,
    "but": true,
    "his": true,
    "by": true,
    "from": true,
    "for": true,
    "are": true,
    "serve": true,
    "dish": true,
    "dishes": true,
    "restaurant": true,
    "restaurants": true,
    "its": true,
    "your": true,
    "all": true,
    "an": true,
    "is": true,
    "food": true,
    "serv": true,
    "cuisine": true
  };

  FrIIndex = (function() {
    function FrIIndex() {
      this.map = {};
    }

    FrIIndex.prototype.add = function(id, text) {
      var tokens, word, _i, _len, _results;
      tokens = FrIIndex.normalize(text).split(' ');
      _results = [];
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        word = tokens[_i];
        _results.push(this.index(id, word));
      }
      return _results;
    };

    FrIIndex.prototype.lookup = function(text) {
      var result, token, tokens, v;
      tokens = FrIIndex.normalize(text).split(' ');
      result = FrIIndex.intersect((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tokens.length; _i < _len; _i++) {
          token = tokens[_i];
          _results.push(FrIIndex.union((function() {
            var _j, _len1, _ref, _results1;
            _ref = FrIIndex.variants(token);
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              v = _ref[_j];
              if (this.map[v] != null) {
                _results1.push(this.map[v]);
              }
            }
            return _results1;
          }).call(this)));
        }
        return _results;
      }).call(this));
      return Object.keys(result.ids);
    };

    FrIIndex.prototype.index = function(id, word) {
      var w, _i, _len, _ref, _results;
      if (blacklist[word] != null) {
        return;
      }
      _ref = FrIIndex.variants(word);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        w = _ref[_i];
        if (this.map[w] == null) {
          this.map[w] = {
            $: 0,
            ids: {}
          };
        }
        this.map[w].ids[id] = true;
        _results.push(this.map[w].$++);
      }
      return _results;
    };

    FrIIndex.normalize = function(text) {
      return text.replace(normalization_pattern, '').replace(spaces, ' ').trim().toLowerCase();
    };

    FrIIndex.variants = function(word) {
      var arr, stemmed;
      arr = [word];
      stemmed = natural.PorterStemmer.stem(word);
      if (stemmed !== word) {
        arr.push(stemmed);
      }
      return arr;
    };

    FrIIndex.union = function(hashes) {
      var hash, id, result, _i, _len;
      result = {
        $: 0,
        ids: {}
      };
      for (_i = 0, _len = hashes.length; _i < _len; _i++) {
        hash = hashes[_i];
        for (id in hash.ids) {
          if (!(!result.ids[id])) {
            continue;
          }
          result.ids[id] = true;
          result.$++;
        }
      }
      return result;
    };

    FrIIndex.intersect = function(hashes) {
      var found, i, id, length, range, result, _, _i, _j, _len, _ref, _results;
      length = hashes.length;
      range = (function() {
        _results = [];
        for (var _i = 1; 1 <= length ? _i < length : _i > length; 1 <= length ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      hashes.sort(function(h1, h2) {
        return h1.$ - h2.$;
      });
      result = {
        $: 0,
        ids: {}
      };
      _ref = hashes[0].ids;
      for (id in _ref) {
        _ = _ref[id];
        found = true;
        for (_j = 0, _len = range.length; _j < _len; _j++) {
          i = range[_j];
          if (hashes[i].ids[id] == null) {
            found = false;
            break;
          }
        }
        if (found) {
          result.$++;
          result.ids[id] = true;
        }
      }
      return result;
    };

    return FrIIndex;

  })();

  module.exports = FrIIndex;

}).call(this);
